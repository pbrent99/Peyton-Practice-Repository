calculate_avg_expression_nested <- function(exprs_mtx) {
# These are libraries that need to be loaded before running this function
  # library(WGCNA)
  # library(flashClust)
  # library(curl)
  # allowWGCNAThreads()
  # library(AnnotationDbi)
  # library(org.Hs.eg.db)
  # library(clusterProfiler)
  # library(msigdbr)
  # library(purrr)
  
  exprs_mtx <- exprs_mtx
  exprs_mtx_t <- t(exprs_mtx)
  
  # Choose a set of soft-thresholding powers
  powers <- c(1:10, seq(from = 12, to = 20, by = 2))
  
  sft <- pickSoftThreshold(exprs_mtx_t, powerVector = powers, verbose = 5)
  
  r2 <- sft$fitIndices[, 2]
  validPowers <- powers[r2 > 0.8 & r2 < 0.9]
  validR2 <- r2[r2 > 0.8 & r2 < 0.9]
  
  # Choose the power with the highest R^2 within the range
  if (length(validPowers) > 0) {
    bestIndex <- which.max(validR2)
    selectedPower <- validPowers[bestIndex]
  } else {
    selectedPower <- powers[which.max(r2)]
  }
  picked_power <- selectedPower
  
  cor <- WGCNA::cor
  
  netwk <- blockwiseModules(
    exprs_mtx_t,
    power = picked_power,
    networkType = "signed",
    deepSplit = 2,
    pamRespectsDendro = TRUE,
    minModuleSize = 30,
    maxBlockSize = 4000,
    reassignThreshold = 0,
    mergeCutHeight = 0.25,
    saveTOMS = TRUE,
    saveTOMFileBase = "ER",
    numericLabels = TRUE,
    verbose = 3
  )
  
  module_df <- data.frame(
    geneID = names(netwk$colors),
    colors = labels2colors(netwk$colors)
  )
  
  cluster_df <- data.frame(
    colors = unique(module_df$colors),
    cluster = seq(1, length(unique(module_df$colors)))
  )
  
  module_df_2 <- merge(module_df, cluster_df, by = "colors")
  module_df_2$entrez <- mapIds(
    org.Hs.eg.db,
    module_df_2$geneID,
    column = "ENTREZID",
    keytype = "SYMBOL",
    multiVals = "first"
  )
  
  enrichment_res <- list()
  
  msigdb_data <- msigdbr(species = "Homo sapiens", category = "C5")
  msigdb_pathways <- msigdb_data %>% dplyr::select(gs_name, entrez_gene)
  
  cl <- makeCluster(8)
  on.exit(stopCluster(cl))
  
  clusterExport(cl, c("exprs_mtx", "msigdb_pathways", "module_df_2"),
                envir = environment())
  
  clusterEvalQ(cl, {
    library(clusterProfiler)
    library(org.Hs.eg.db)
    library(dplyr)
    library(AnnotationDbi)
  })
  
  enrichment_res <- parLapply(cl, unique(module_df_2$cluster), function(x) {
    cluster_genes <- module_df_2$entrez[module_df_2$cluster == x]
    if (length(cluster_genes) > 0) {
      enricher_res <- enricher(
        gene = cluster_genes,
        TERM2GENE = msigdb_pathways
      )
      return(enricher_res)
    }
  })
  
  top_20_pathways <- lapply(enrichment_res, function(cluster) {
    cluster_df <- data.frame(cluster@result)
    top_20 <- cluster_df[1:20, ]
    return(top_20)
  })
  
  
  clusterExport(cl, "enrichment_res", environment())
  
  top_20_pathways_GOBP <- parLapply(cl, enrichment_res, function(res) {
    cluster_df <- data.frame(res@result)[1:20, ] %>%
      dplyr::filter(grepl("GOBP", Description) & p.adjust <= 0.05)
    if (nrow(cluster_df) == 0) {
      return(NULL)
    }
    return(cluster_df)
  })
  
  # Removing NULL list 
  top_20_pathways_GOBP <- compact(top_20_pathways_GOBP)
  
  pathway_results <- lapply(top_20_pathways_GOBP, function(x) {
    pathway_name <- x$ID[1]
    gene_ids <- unlist(strsplit(x$geneID, "/")) 
    gene_symbols <- mapIds(org.Hs.eg.db, 
                           keys = gene_ids, 
                           column = "SYMBOL",
                           keytype = "ENTREZID",
                           multiVals = "first")
  })
  
  names(pathway_results) <- sapply(top_20_pathways_GOBP, function(x) x$ID[1])
  
  clusterExport(cl, "pathway_results", environment())
  
  cluster_avg_expr <- parLapply(cl, pathway_results, function(converted) {
    lapply(converted, function(gene_set) {
      genes_in_intersection <- intersect(gene_set, rownames(exprs_mtx))
      
      if (length(genes_in_intersection) > 0) {
        exprs_mtx_fil <- exprs_mtx[genes_in_intersection, , drop = FALSE]
        avg_exprs_pathway <- colMeans(exprs_mtx_fil, na.rm = TRUE)
        overall_avg_expr <- mean(avg_exprs_pathway, na.rm = TRUE)
        
        return(list(avg_exprs_pathway = avg_exprs_pathway,
                    overall_avg_expr = overall_avg_expr))
      } else {
        return(NULL)
      }
    })
  })
  
  avg_exprs_pathway_list <- lapply(cluster_avg_expr, function(x) {
    lapply(x, function(y) if (!is.null(y)) return(y$avg_exprs_pathway))
  })
  
  overall_avg_expr_list <- lapply(cluster_avg_expr, function(x) {
    lapply(x, function(y) if (!is.null(y)) return(y$overall_avg_expr))
  })
  
  enrichment_res_list <- lapply(enrichment_res, function(x) {
    top_20_df <- data.frame(x@result) %>%
      dplyr::filter(grepl("GOBP", Description)) %>%
      dplyr::arrange(p.adjust) %>%
      dplyr::slice_head(n = 20)
    return(top_20_df)
  })
  
  return(list(
    avg_exprs_pathway = avg_exprs_pathway_list,
    overall_avg_expr = overall_avg_expr_list,
    enrichment_res = enrichment_res_list
  ))
}
